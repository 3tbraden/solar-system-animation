{"version":3,"sources":["Components/Planet/Tooltip.js","Components/Planet/index.js","App.js","serviceWorker.js","index.js"],"names":["Tooltip","props","Lead","styled","div","Text","offset","className","style","position","left","name","Sun","scaleDown","diameter","Planet","orbitKeyframes","keyframes","Math","cos","inclination","PI","orbitRadius","sunDiameter","sin","period","id","App","useState","scalingFactor","setScalingFactor","console","log","NEPTUNE_ORBIT_RADIUS","window","innerWidth","type","min","max","value","step","onChange","event","target","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e439ea6d.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nfunction Tooltip(props) {\n  const Lead = styled.div`\n    &:after {\n      content: \"\";\n      position: absolute;\n      border-top: 1px solid white;\n      width: 16px;\n      transform: rotate(-45deg);\n      transform-origin: 0% 0%;\n    }\n  `\n\n  const Text= styled.div`\n    position: absolute;\n    color: white;\n    text-decoration: underline;\n    left: ${10 + props.offset / 2}px;\n    bottom: 0.5rem;\n  `\n\n  return (\n    <div className=\"tooltip\"\n      style={{\n        position: \"relative\",\n        left: `${props.offset / 2}px`,\n      }}>\n      <Lead />\n      <Text>&nbsp;{`${props.name}`}</Text>\n    </div>\n  )\n}\n\nexport default Tooltip;\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nimport \"./Planet.css\";\nimport Tooltip from './Tooltip';\n\nconst EARTH_ORBIT_TIME = 100;\n\nfunction Sun(props) {\n  const Sun = styled.div`\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    height: 1px;\n    width: 1px;\n    background-color: #ffffa0;\n    background: radial-gradient(#ffffa0, #ffffcb);\n    box-shadow: 0 0 ${51 / props.scaleDown}px ${props.diameter / props.scaleDown}px #ffffed,\n                0 0 ${42 / props.scaleDown}px ${49 / props.scaleDown}px #ffffdc,\n                0 0 ${31 / props.scaleDown}px ${37 / props.scaleDown}px #ffffcb;\n    z-index: 0;\n  `\n  return (\n    <Sun />\n  )\n}\n\nfunction Planet(props) {\n  const orbitKeyframes = keyframes`\n    0% {\n      left: calc(50% - ${props.diameter / 2 / props.scaleDown}px);\n      top: calc(50% - ${props.diameter / 2 / props.scaleDown}px);\n    }\n    25% {\n      left: calc(50% - ${props.diameter / 2 / props.scaleDown}px + ${Math.cos(props.inclination * Math.PI / 180) * props.orbitRadius / 0.696 * props.sunDiameter / props.scaleDown }px);\n      top: calc(50% - ${props.diameter / 2 / props.scaleDown}px + ${Math.sin(props.inclination * Math.PI / 180) * props.orbitRadius / 0.696 * props.sunDiameter / props.scaleDown }px);\n    }\n    75% {\n      left: calc(50% - ${props.diameter / 2 / props.scaleDown}px - ${Math.cos(props.inclination * Math.PI / 180) * props.orbitRadius / 0.696 * props.sunDiameter / props.scaleDown}px);\n      top: calc(50% - ${props.diameter / 2 / props.scaleDown}px - ${Math.sin(props.inclination * Math.PI / 180) * props.orbitRadius / 0.696 * props.sunDiameter / props.scaleDown }px);\n    }\n    100% {\n      left: calc(50% - ${props.diameter / 2 / props.scaleDown}px);\n      top: calc(50% - ${props.diameter / 2 / props.scaleDown}px);\n    }\n  `\n\n  const Planet = styled.div`\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    width: ${props.diameter / props.scaleDown}px;\n    height: ${props.diameter / props.scaleDown}px;\n    animation: ${orbitKeyframes} ${EARTH_ORBIT_TIME * props.period / props.scaleDown}s infinite;\n    animation-timing-function: linear;\n\n    &:hover > div {\n      display: block;\n    }\n  `\n\n  return (\n    <Planet id={props.id}>\n      <Tooltip name={props.name} offset={props.diameter / props.scaleDown} scaleDown={props.scaleDown} />\n    </Planet>\n  );\n}\n\nexport { Sun, Planet };\n","import React, {useState} from 'react';\n\nimport './App.css';\nimport { Sun, Planet } from './Components/Planet';\n\nconst SUN_DIAMETER = 63;\nconst NEPTUNE_ORBIT_RADIUS = 2795.2;\n\nfunction App() {\n  const [scalingFactor, setScalingFactor] = useState(1);\n  const handleChange = (event) => {\n    setScalingFactor(event.target.value);\n    console.log(`current scale at ${scalingFactor}`);\n  };\n\n  console.log(`scaling from 1 to ${(NEPTUNE_ORBIT_RADIUS * 2) * SUN_DIAMETER / (window.innerWidth - 200)}`);\n  return (\n    <div className=\"App\">\n      <div id=\"legend-div\">\n        <span>Planets in animation, except the Sun, are scaled up 10x for better visibility - if you don't zoom out too much.</span>\n      </div>\n      <Sun diameter={SUN_DIAMETER} scaleDown={scalingFactor} />\n      <Planet id=\"mercury\" name=\"Mercury\" diameter={2.184} period={0.241} sunDiameter={SUN_DIAMETER} orbitRadius={36.8} scaleDown={scalingFactor} inclination={7.01} />\n      <Planet id=\"venus\" name=\"Venus\" diameter={5.4288} period={0.616} sunDiameter={SUN_DIAMETER} orbitRadius={67.2} scaleDown={scalingFactor} inclination={3.39} />\n      <Planet id=\"earth\" name=\"Earth\" diameter={5.7408} period={1} sunDiameter={SUN_DIAMETER} orbitRadius={93} scaleDown={scalingFactor} inclination={0} />\n      <Planet id=\"mars\" name=\"Mars\" diameter={2.9952} period={1.882} sunDiameter={SUN_DIAMETER} orbitRadius={141.6} scaleDown={scalingFactor} inclination={1.85} />\n      <Planet id=\"jupiter\" name=\"Jupiter\" diameter={64.0848} period={11.87} sunDiameter={SUN_DIAMETER} orbitRadius={483.6} scaleDown={scalingFactor} inclination={1.31} />\n      <Planet id=\"saturn\" name=\"Saturn\" diameter={53.976} period={29.4477} sunDiameter={SUN_DIAMETER} orbitRadius={886.5} scaleDown={scalingFactor} inclination={2.49} />\n      <Planet id=\"uranus\" name=\"Uranus\" diameter={22.9} period={84.078} sunDiameter={SUN_DIAMETER} orbitRadius={1783.7} scaleDown={scalingFactor} inclination={0.77} />\n      <Planet id=\"neptune\" name=\"Neptune\" diameter={22.2144} period={164.882} sunDiameter={SUN_DIAMETER} orbitRadius={NEPTUNE_ORBIT_RADIUS} scaleDown={scalingFactor} inclination={1.77} />\n      <div id=\"control-panel\">\n        <input id=\"scale-slider\" type=\"range\" min=\"1\" max={(NEPTUNE_ORBIT_RADIUS * 2) * SUN_DIAMETER / (window.innerWidth - 10)} value={scalingFactor} step={1} onChange={handleChange}></input>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}